[{"author":null,"categories":null,"content":null,"date":1701475200,"description":"","dir":"/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1703635200,"objectID":"1be46b9fd693de62b8f5c469945764e9","permalink":"https://junyubian.github.io/criterions-for-site/","publishdate":"2023-12-02T00:00:00Z","readingtime":1,"relpermalink":"/criterions-for-site/","section":"","summary":"","tags":null,"title":"Criterions for Site","type":"page","url":"/criterions-for-site/","weight":0,"wordcount":163},{"author":null,"categories":["Tech"],"content":"Hugo Site Auto Deployment with Github Action","date":1701475200,"description":"Hugo Site Auto Deployment with Github Action","dir":"post/","excerpt_html":"Hugo Site Auto Deployment with Github Action","excerpt_text":"Hugo Site Auto Deployment with Github Action","expirydate":-62135596800,"fuzzywordcount":100,"html":"Hugo Site Auto Deployment with Github Action","keywords":null,"kind":"page","lang":"en","lastmod":1701475200,"objectID":"7f88104bad6fa5211823fc7c45e00aee","permalink":"https://junyubian.github.io/2023/12/02/Hugo+Github-Action-Auto-Deploy/","publishdate":"2023-12-02T00:00:00Z","readingtime":1,"relpermalink":"/2023/12/02/Hugo+Github-Action-Auto-Deploy/","section":"post","summary":"1-Background 2-Steps 3-Good to know Reference 1-Background Trying to auto deploy Hugo blogs with Github Action.\n2-Steps Most steps and tips have been covered by reference#1 and reference#2.\n3-Good to know Action will build from base url, could use this feature to create different sub domain under github.io. e.g. create a repo called projects to display different projects, this will be added to github.io/prjects\nIf site deployment is automatically triggered by Github Action, need to notice the time difference between Github server and local time zone.","tags":["hugo","git","notes"],"title":"Hugo Site Auto Deployment with Github Action","type":"post","url":"/2023/12/02/Hugo+Github-Action-Auto-Deploy/","weight":0,"wordcount":89},{"author":null,"categories":["Tech"],"content":"Fluent Bit Client Notes","date":1699315200,"description":"Fluent Bit Client Notes","dir":"post/","excerpt_html":"Fluent Bit Client Notes","excerpt_text":"Fluent Bit Client Notes","expirydate":-62135596800,"fuzzywordcount":400,"html":"Fluent Bit Client Notes","keywords":null,"kind":"page","lang":"en","lastmod":1699315200,"objectID":"c4d5b3b6a58b89eeb2461eb1803e293d","permalink":"https://junyubian.github.io/2023/11/07/Fluent-Bit-Notes/","publishdate":"2023-11-07T00:00:00Z","readingtime":2,"relpermalink":"/2023/11/07/Fluent-Bit-Notes/","section":"post","summary":"What is fluent bit Structural sketch How to set it up Through config file Though command line parameters Other ootes What is fluent bit One day, the Insurance Management System Tom built crashed. Good news is the system recovered through rebooting, bad news is Tom did not know what had gone wrong. Tom\u0026rsquo;s dad comes by and says to Tom \u0026ldquo;Fluent Bit is a telemetry agent designed to collect and process telemetry data from constrained systems to cloud infrastructures.","tags":["fluent-bit","tom-show","notes"],"title":"Fluent Bit Client Notes","type":"post","url":"/2023/11/07/Fluent-Bit-Notes/","weight":0,"wordcount":346},{"author":null,"categories":["Tech"],"content":"getopts in Bash","date":1666310400,"description":"getopts in Bash","dir":"post/","excerpt_html":"getopts in Bash","excerpt_text":"getopts in Bash","expirydate":-62135596800,"fuzzywordcount":400,"html":"getopts in Bash","keywords":null,"kind":"page","lang":"en","lastmod":1666310400,"objectID":"b993252315d5be2d7e774ca2cab2584c","permalink":"https://junyubian.github.io/2022/10/21/getopts-in-Bash/","publishdate":"2022-10-21T00:00:00Z","readingtime":2,"relpermalink":"/2022/10/21/getopts-in-Bash/","section":"post","summary":"1. Notice 2. Syntax 3. Reference(s) 1. Notice 1.1 getopts is different from getopt. 1.2 getopts runs on any system running bash in POSIX mode (e.g., set -o posix), getopt is a system tool varies in different systems. 1.3 getopts parses short options, which are a single dash (\u0026quot;-\u0026quot;) and a letter or digit.e.g. -2, -d, and -D. It can also parse short options in combination, for instance -2dD. But each option will be treated seperately, i.","tags":["bash","notes"],"title":"getopts in Bash","type":"post","url":"/2022/10/21/getopts-in-Bash/","weight":0,"wordcount":386},{"author":null,"categories":["Tech"],"content":"就目前来看，相比controlplane，dataplane得到的发展更受局限，我们少有具有推动性的或特性丰富的dataplane，从而导致了数据中心相关创新的缺乏。我们亟需一个灵活的高性能可编程dataplane，所以fd.io，或者说VPP，出现了。","date":1619395200,"description":"就目前来看，相比controlplane，dataplane得到的发展更受局限，我们少有具有推动性的或特性丰富的dataplane，从而导致了数据中心相关创新的缺乏。我们亟需一个灵活的高性能可编程dataplane，所以fd.io，或者说VPP，出现了。","dir":"post/","excerpt_html":"就目前来看，相比controlplane，dataplane得到的发展更受局限，我们少有具有推动性的或特性丰富的dataplane，从而导致了数据中心相关创新的缺乏。我们亟需一个灵活的高性能可编程dataplane，所以fd.io，或者说VPP，出现了。","excerpt_text":"就目前来看，相比controlplane，dataplane得到的发展更受局限，我们少有具有推动性的或特性丰富的dataplane，从而导致了数据中心相关创新的缺乏。我们亟需一个灵活的高性能可编程dataplane，所以fd.io，或者说VPP，出现了。","expirydate":-62135596800,"fuzzywordcount":800,"html":"就目前来看，相比controlplane，dataplane得到的发展更受局限，我们少有具有推动性的或特性丰富的dataplane，从而导致了数据中心相关创新的缺乏。我们亟需一个灵活的高性能可编程dataplane，所以fd.io，或者说VPP，出现了。","keywords":null,"kind":"page","lang":"en","lastmod":1619395200,"objectID":"19846297ca9ced7542fc1738597bb6b9","permalink":"https://junyubian.github.io/2021/04/26/FDio-intro/","publishdate":"2021-04-26T00:00:00Z","readingtime":2,"relpermalink":"/2021/04/26/FDio-intro/","section":"post","summary":"关于datapath的创新 FD.io解决的问题 现有dataplane的缺陷 FD.io的简单介绍 与DPDK的关系 关于VPP 总结自fd.io Youtube 关","tags":["fd-io","notes"],"title":"FD.io简介","type":"post","url":"/2021/04/26/FDio-intro/","weight":0,"wordcount":746},{"author":null,"categories":["Tech"],"content":"In this blog, we will talk about one trick can be used to solve problems to do with frequent addition and subtraction to a subsection of an array","date":1604793600,"description":"In this blog, we will talk about one trick can be used to solve problems to do with frequent addition and subtraction to a subsection of an array","dir":"post/","excerpt_html":"In this blog, we will talk about one trick can be used to solve problems to do with frequent addition and subtraction to a subsection of an array","excerpt_text":"In this blog, we will talk about one trick can be used to solve problems to do with frequent addition and subtraction to a subsection of an array","expirydate":-62135596800,"fuzzywordcount":300,"html":"In this blog, we will talk about one trick can be used to solve problems to do with frequent addition and subtraction to a subsection of an array","keywords":null,"kind":"page","lang":"en","lastmod":1604793600,"objectID":"1bd8df29b71b7207e875b45fbaf7ce54","permalink":"https://junyubian.github.io/2020/11/08/Diff-Array/","publishdate":"2020-11-08T00:00:00Z","readingtime":2,"relpermalink":"/2020/11/08/Diff-Array/","section":"post","summary":"Functionality Trick Recovering original array Opearting a diff array In this blog, we will talk about one trick can be used to solve problems to do with frequent addition and subtraction to a subsection of an array - Diff Array.\nFunctionality Todo with frequent addition and subtraction to a subsection of an array.\ne.g. Given array arr, add 1 for elements between arr[0] and arr[3] inclusively, then, substract 3 for elements between arr[2] and arr[5] inclusively, what will be the final arr.","tags":["algorithm","notes","c++"],"title":"Diff Array","type":"post","url":"/2020/11/08/Diff-Array/","weight":0,"wordcount":214},{"author":null,"categories":["Tech"],"content":"In this blog, we will look into several ways of implementing swap in different ways.","date":1589673600,"description":"In this blog, we will look into several ways of implementing swap in different ways.","dir":"post/","excerpt_html":"In this blog, we will look into several ways of implementing swap in different ways.","excerpt_text":"In this blog, we will look into several ways of implementing swap in different ways.","expirydate":-62135596800,"fuzzywordcount":200,"html":"In this blog, we will look into several ways of implementing swap in different ways.","keywords":null,"kind":"page","lang":"en","lastmod":1589673600,"objectID":"b3c9b00f05520f6956046469120108f5","permalink":"https://junyubian.github.io/2020/05/17/SWAP-Function/","publishdate":"2020-05-17T00:00:00Z","readingtime":1,"relpermalink":"/2020/05/17/SWAP-Function/","section":"post","summary":"In this blog, we will look into several ways of implementing swap in different ways.\nIntermedia Variable int a = 1; int b = 2; int tem = a; a = b; b = temp; Addition and Subtraction int a = 1; int b = 2; a = a+b; b = a-b; a = a-b; Multiplication and Division int a = 1; int b = 2; a = a*b; b = a/b; a = a/b; XOR int a = 1; int b = 2; a = a^b; b = b^a; // b = b^(a^b) = b^a^b = b^b^a = 0^a = a a = a^b; // a = (a^b)^a = a^b^a = a^a^b = 0^b = b ","tags":["algorithm","notes","c++"],"title":"SWAP Function","type":"post","url":"/2020/05/17/SWAP-Function/","weight":0,"wordcount":117},{"author":null,"categories":["Tech"],"content":"There are different type of containers in C++ STL. To add a new element into the back of a container, we normally use `push_back()`. In this blog, we will look into a new way of performing push back - `emplace_back()`.","date":1589587200,"description":"There are different type of containers in C++ STL. To add a new element into the back of a container, we normally use `push_back()`. In this blog, we will look into a new way of performing push back - `emplace_back()`.","dir":"post/","excerpt_html":"There are different type of containers in C++ STL. To add a new element into the back of a container, we normally use `push_back()`. In this blog, we will look into a new way of performing push back - `emplace_back()`.","excerpt_text":"There are different type of containers in C++ STL. To add a new element into the back of a container, we normally use `push_back()`. In this blog, we will look into a new way of performing push back - `emplace_back()`.","expirydate":-62135596800,"fuzzywordcount":500,"html":"There are different type of containers in C++ STL. To add a new element into the back of a container, we normally use `push_back()`. In this blog, we will look into a new way of performing push back - `emplace_back()`.","keywords":null,"kind":"page","lang":"en","lastmod":1589587200,"objectID":"b3a1542c3684d0a414a184d2447a69b4","permalink":"https://junyubian.github.io/2020/05/16/emplace_back-in-C++/","publishdate":"2020-05-16T00:00:00Z","readingtime":1,"relpermalink":"/2020/05/16/emplace_back-in-C++/","section":"post","summary":"There are different type of containers in C++ STL. To add a new element into the back of a container, we normally use push_back(). In this blog, we will look into a new way of performing push back - emplace_back(). Background Knowledge Rvalue References: with aim of increasing the efficiency of C++, rvalues are included. It doesn\u0026rsquo;t need to copy the value, the rvalue reference is bound to the value","tags":["algorithm","notes","c++"],"title":"EMPLACE_BACK in C++","type":"post","url":"/2020/05/16/emplace_back-in-C++/","weight":0,"wordcount":480},{"author":null,"categories":["Proj"],"content":"In this series of blogs, we will talk about how to build a Insurance Management web application together with database system.","date":1588032000,"description":"In this series of blogs, we will talk about how to build a Insurance Management web application together with database system.","dir":"post/","excerpt_html":"In this series of blogs, we will talk about how to build a Insurance Management web application together with database system.","excerpt_text":"In this series of blogs, we will talk about how to build a Insurance Management web application together with database system.","expirydate":-62135596800,"fuzzywordcount":800,"html":"In this series of blogs, we will talk about how to build a Insurance Management web application together with database system.","keywords":null,"kind":"page","lang":"en","lastmod":1588032000,"objectID":"aad78fee01fdc4e6817143ba863a25d4","permalink":"https://junyubian.github.io/2020/04/28/Insurance-Management-System---Overview/","publishdate":"2020-04-28T00:00:00Z","readingtime":2,"relpermalink":"/2020/04/28/Insurance-Management-System---Overview/","section":"post","summary":"In this series of blogs, we will talk about how to build a Insurance Management web application together with database system. Background Tom\u0026rsquo;s dad works in an insurance company. His work is to drop down who bought what kind of insurance, on which day does the customer receives an invoice, and on which day does the customer makes a payment. Oneday, Tom\u0026rsquo;s dad talks to Tom: \u0026ldquo;Oh Tom, you see","tags":["projects","web","tom-show"],"title":"Insurance Management System - Overview","type":"post","url":"/2020/04/28/Insurance-Management-System---Overview/","weight":0,"wordcount":771},{"author":null,"categories":["Tech"],"content":"In computer science, the Knuth–Morris–Pratt algorithm (or KMP algorithm) is a string-searching algorithm that searches for occurrences of a \"word\" W within ...","date":1587081600,"description":"In computer science, the Knuth–Morris–Pratt algorithm (or KMP algorithm) is a string-searching algorithm that searches for occurrences of a \"word\" W within ...","dir":"post/","excerpt_html":"In computer science, the Knuth–Morris–Pratt algorithm (or KMP algorithm) is a string-searching algorithm that searches for occurrences of a \"word\" W within ...","excerpt_text":"In computer science, the Knuth–Morris–Pratt algorithm (or KMP algorithm) is a string-searching algorithm that searches for occurrences of a \"word\" W within ...","expirydate":-62135596800,"fuzzywordcount":500,"html":"In computer science, the Knuth–Morris–Pratt algorithm (or KMP algorithm) is a string-searching algorithm that searches for occurrences of a \"word\" W within ...","keywords":null,"kind":"page","lang":"en","lastmod":1587081600,"objectID":"e726a7ba9cec177a262ad82c49f96b5a","permalink":"https://junyubian.github.io/2020/04/17/KMP-Algorithm/","publishdate":"2020-04-17T00:00:00Z","readingtime":2,"relpermalink":"/2020/04/17/KMP-Algorithm/","section":"post","summary":"Background\u0026hellip; Once upon a time, Tom asked his father to find abab inside abcaabababaa.\nTom\u0026rsquo;s dad did this in a traditional way (brute force). He compared each character of the first string with each character of the second string. When he find one character not matching, for example, the third character in the second string in this case, he start again from the second character of the second string. It went on and on and on\u0026hellip;","tags":["algorithm","tom-show"],"title":"KMP Algorithm","type":"post","url":"/2020/04/17/KMP-Algorithm/","weight":0,"wordcount":413},{"author":null,"categories":null,"content":null,"date":1546992000,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1546992000,"objectID":"2f05902e7435de187bb5303fb74f55e2","permalink":"https://junyubian.github.io/post/readme/","publishdate":"2019-01-09T00:00:00Z","readingtime":2,"relpermalink":"/post/readme/","section":"post","summary":"Clean White Theme for Hugo CleanWhite is a clean, elegant, but fully functional blog theme for Hugo. Here is a live demo site using this theme. It is based on huxblog Jekyll Theme and Clean Blog Jekyll Theme. These two upstream projects have done awesome jobs to create a blog theme, what I\u0026rsquo;m doing here is porting it to Hugo, of which I like the simplicity and the much faster","tags":null,"title":"Clean White Theme for Hugo","type":"post","url":"/post/readme/","weight":0,"wordcount":953},{"author":null,"categories":["Tech"],"content":"Istio是来自Google，IBM和Lyft的一个Service Mesh（服务网格）开源项目，是Google继Kubernetes之后的又一大作,本文将演示如何从裸机开始从零搭建Istio及Bookinfo示例程序。","date":1509796800,"description":"Istio是来自Google，IBM和Lyft的一个Service Mesh（服务网格）开源项目，是Google继Kubernetes之后的又一大作,本文将演示如何从裸机开始从零搭建Istio及Bookinfo示例程序。","dir":"post/","excerpt_html":"Istio是来自Google，IBM和Lyft的一个Service Mesh（服务网格）开源项目，是Google继Kubernetes之后的又一大作,本文将演示如何从裸机开始从零搭建Istio及Bookinfo示例程序。","excerpt_text":"Istio是来自Google，IBM和Lyft的一个Service Mesh（服务网格）开源项目，是Google继Kubernetes之后的又一大作,本文将演示如何从裸机开始从零搭建Istio及Bookinfo示例程序。","expirydate":-62135596800,"fuzzywordcount":5600,"html":"Istio是来自Google，IBM和Lyft的一个Service Mesh（服务网格）开源项目，是Google继Kubernetes之后的又一大作,本文将演示如何从裸机开始从零搭建Istio及Bookinfo示例程序。","keywords":null,"kind":"page","lang":"en","lastmod":1509796800,"objectID":"d993f98f09d7341809e97a3c1ba8e960","permalink":"https://junyubian.github.io/2017/11/04/istio-install_and_example/","publishdate":"2017-11-04T12:00:00Z","readingtime":12,"relpermalink":"/2017/11/04/istio-install_and_example/","section":"post","summary":"\u003ch2 id=\"服务网格简介\"\u003e服务网格简介\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e服务网格\u003c/strong\u003e（Service Mesh）是为解决微服务的通信和治理而出现的一种\u003cstrong\u003e架构模式\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e服务网格将服务间通讯以及与此相关的管理控制功能从业务程序中下移到一个基础设施层，从而彻底隔离了业务逻辑和服务通讯两个关注点。采用服务网格后，应用开发者只需要关注并实现应用业务逻辑。服务之间的通信，包括服务发现，通讯的可靠性，通讯的安全性，服务路由等由服务网格层进行处理，并对应用程序透明。\u003c/p\u003e","tags":["Istio"],"title":"Istio及Bookinfo示例程序安装试用笔记","type":"post","url":"/2017/11/04/istio-install_and_example/","weight":0,"wordcount":5529},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://junyubian.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"Hi there! Still underconstruction here\u0026hellip; - China -\u0026gt; Australia -\u0026gt; Sweden -\u0026gt; US -\u0026gt; China - Siemens -\u0026gt; Alibaba -\u0026gt; Tencent -\u0026gt; Intel - XR -\u0026gt; Backend -\u0026gt; Android -\u0026gt; Edge Computing mailto:junyubian@gmail.com","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":33},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"leetcode/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4c6c8fe564388302b2a6fc2f5b92c9ae","permalink":"https://junyubian.github.io/leetcode/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/leetcode/","section":"","summary":"coming soon\u0026hellip;","tags":null,"title":"","type":"page","url":"/leetcode/","weight":0,"wordcount":2},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":17800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1ede8046f9c3a02d422dea7bbf324e64","permalink":"https://junyubian.github.io/notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":36,"relpermalink":"/notes/","section":"","summary":"1-Operating Systems 1.1-进程和线程 进程：系统进行资源分配的基本单位； 线程：CPU调度的基本单位： 共享进程的全部资源； 独有程序计数器、寄存器和栈。 1.2-","tags":null,"title":"","type":"page","url":"/notes/","weight":0,"wordcount":17762},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"publications/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"23d1e75f872528fc12f5f2b142375ff7","permalink":"https://junyubian.github.io/publications/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/publications/","section":"","summary":"coming soon\u0026hellip;","tags":null,"title":"","type":"page","url":"/publications/","weight":0,"wordcount":2},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://junyubian.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://junyubian.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0}]